(function (b, c) {
    'object' == typeof exports && 'object' == typeof module ? module.exports = c() : 'function' == typeof define && define.amd ? define([], c) : 'object' == typeof exports ? exports.Najtingalo = c() : b.Najtingalo = c()
})(this, function () {
    return function (a) {
        function b(d) {
            if (c[d])return c[d].exports;
            var f = c[d] = {i: d, l: !1, exports: {}};
            return a[d].call(f.exports, f, f.exports, b), f.l = !0, f.exports
        }

        var c = {};
        return b.m = a, b.c = c, b.i = function (d) {
            return d
        }, b.d = function (d, f, g) {
            b.o(d, f) || Object.defineProperty(d, f, {configurable: !1, enumerable: !0, get: g})
        }, b.n = function (d) {
            var f = d && d.__esModule ? function () {
                return d['default']
            } : function () {
                return d
            };
            return b.d(f, 'a', f), f
        }, b.o = function (d, f) {
            return Object.prototype.hasOwnProperty.call(d, f)
        }, b.p = '', b(b.s = 1)
    }([function (a, b) {
        'use strict';
        function d(w) {
            return '' === w.trim() ? '' : '\n/*' + w.trim() + '*/\n'
        }

        Object.defineProperty(b, '__esModule', {value: !0});
        class f {
            getComments() {
                return d(this.comments)
            }

            get comments() {
                return ''
            }

            set comments(w) {
                return Object.defineProperty(this, 'comments', {value: w, writable: !0}), w
            }

            expand() {
                return this._expand || this
            }
        }
        b.Node = f;
        class g extends f {
            filterIP(w) {
                this.instructions = this.instructions.filter(w)
            }

            add(w) {
                this.instructions.push(w)
            }

            sumMoves() {
                return Infinity
            }
        }
        b.NodeGroup = g;
        b.Init = class extends f {
            toString() {
                return 'heap = heap || []; \n let pointer = 0;' + d(this.comments)
            }
        };
        b.NullNode = class extends f {
            toString() {
                return ''
            }
        };
        b.Output = class extends f {
            toString() {
                return 'print(String.fromCharCode(heap[pointer]|0));' + this.getComments()
            }
        };
        b.Input = class extends f {
            toString() {
                return 'heap[pointer] = getInput()|0;' + this.getComments()
            }
        };
        class o extends f {
            toString() {
                return '}' + this.getComments()
            }
        }
        b.LoopEnd = o;
        class p extends f {
            toString() {
                return 'while(heap[pointer]|0) { ' + this.getComments()
            }
        }
        b.LoopStart = p;
        b.FullLoop = class extends g {
            toString() {
                return new p + '\n' + this.instructions.join('\n') + o.prototype.toString.call(this)
            }
        };
        b.SetCurrentCell = class extends f {
            constructor(w) {
                super(), this.by = 0 | w
            }

            toString() {
                return 'heap[pointer|0] = (' + this.by + '); ' + this.getComments()
            }
        };
        b.Move = class extends f {
            constructor(w) {
                super(), this.by = 0 | w
            }

            toString() {
                return 'pointer += ' + this.by + ';' + this.getComments()
            }
        };
        b.ChangeValue = class extends f {
            constructor(w) {
                super(), this.by = 0 | w
            }

            toString() {
                return 'heap[pointer] = (heap[pointer]|0) + ' + this.by + ';' + this.getComments()
            }
        };
        b.If = class extends g {
            constructor() {
                super(), this.instructions = []
            }

            toString() {
                let w = 'if(heap[pointer]) { \n' + this.instructions.join('\n') + o.prototype.toString.call(this);
                return 0 === this.instructions.length && (w = this.getComments()), w
            }
        };
        b.SetPointer = class extends f {
            constructor(w) {
                super(), this.val = 0 | w
            }

            toString() {
                return 'pointer = (' + this.val + ')|0; ' + this.getComments()
            }
        }
    }, function (a, b, c) {
        'use strict';
        function d() {
            return d
        }

        function f(n) {
            return n[n.length - 1]
        }

        function g(n) {
            return -1 !== '<>+-.,[]'.indexOf(n)
        }

        function h(n, ...o) {
            return function () {
                return new n(...o)
            }
        }

        Object.defineProperty(b, '__esModule', {value: !0});
        var l = c(0), m = {
            '+': h(l.ChangeValue, 1),
            '-': h(l.ChangeValue, -1),
            '>': h(l.Move, 1),
            '<': h(l.Move, -1),
            '.': h(l.Output),
            ',': h(l.Input),
            '[': h(l.LoopStart),
            ']': h(l.LoopEnd)
        };
        d.parseTokens = function (o) {
            const {SetPointer:p, Init:q}=l, r = [new q, new p(0)];
            if (o = [].slice.call(o), d.isValid(o))for (let s = 0; s < o.length; s++) {
                const t = o[s];
                g(t) ? r.push(new m[t]) : f(r).comments += t
            } else throw new TypeError('It is not valid program.');
            return r
        }, d.optimise = function (n, o) {
            function p(F) {
                F.forEach(function (G, H) {
                    G.position = H
                })
            }

            function q(F) {
                return !(F instanceof l.NullNode) && !F.toRemove
            }

            function s(F, G, H) {
                var I;
                for (G--; 0 <= G;) {
                    if (I = H[G], I._nest === F._nest && I instanceof l.LoopStart)return F._matching = I, I._matching = F, I;
                    G--
                }
                throw new RangeError('No matching bracket!')
            }

            if (!o)return n;
            const {NullNode:u}=l;
            var v = n.slice(0);
            if (p(v), 1 <= o) {
                v = v.map(function (F, G, H) {
                    var I = H[G + 1] || new l.NullNode;
                    return I.constructor === F.constructor && void 0 !== F.by && (I.comments = F.comments + '\n' + I.comments, I.by += F.by, F.toRemove = !0), F
                }).filter(function (F) {
                    return !F.toRemove
                }), p(v)
            }
            if (2 <= o && (v = v.map(function (F, G, H) {
                    var I = H[G + 1] || new u, J = H[G - 1] || new u;
                    if (I instanceof l.LoopEnd && J instanceof l.LoopStart && F instanceof l.ChangeValue && -1 === F.by) {
                        I.toRemove = !0, J.toRemove = !0;
                        var K = new l.SetCurrentCell(0);
                        return K.comments = [J.comments, F.comments, I.comments].join('\n').trim(), K
                    }
                    return F
                }).filter(q)), 2 <= o && (v = v.map(function (F, G, H) {
                    var I = H[G + 1] || new u;
                    if (I instanceof l.ChangeValue && F instanceof l.SetCurrentCell) {
                        I.toRemove = !0;
                        var J = new l.SetCurrentCell(F.by + I.by);
                        return J.comments = [F.comments, I.comments].join('\n').trim(), J
                    }
                    return F
                }).filter(q)), 1 <= o && (v = v.filter(function (F) {
                    return F.by instanceof l.ChangeValue || F instanceof l.Move ? 0 !== F.by : !0
                })), 3 <= o) {
                v.forEach(function (F, G, H) {
                    var I = H[G + 1] || new l.NullNode, J = H[G - 1] || new l.NullNode, K = J._nest || 0;
                    J instanceof l.LoopStart ? F._nest = K + 1 : F instanceof l.LoopEnd ? (F._nest = K - 1, s(F, G, H)) : F._nest = K
                }), p(v);
                var x = [];
                v.forEach(function (F) {
                    F instanceof l.LoopStart && x.push([F.position, F._matching.position])
                });
                var y, z, C, E, B = 0, D = !1;
                for (let F = 0; F < x.length; F++)if (y = x[B][0], z = x[B][1], D = v.slice(y + 1, z - 1).every(function (G) {
                        return !(G instanceof l.LoopStart)
                    }), D && v[y] instanceof l.LoopStart) {
                    for (E = new l.FullLoop, E._nest = v[y]._nest, v[y] = E, v[z] = new l.NullNode, C = y + 1; C <= z; C++)E.add(v[C]), v[C] = new l.NullNode;
                    F = 0
                }
            }
            return 3 <= o && (v = v.filter(q), function (F) {
                var I, J, G = F.slice(), H = [];
                for (I = 0; I < G.length; I++)J = G[I], J instanceof l.NodeGroup && ([].push.apply(G, J.instructions), H.push(J));
                return H
            }(v).forEach(function (F) {
                if (F.filterIP(q), f(F.instructions) instanceof l.SetCurrentCell && 0 === f(F.instructions).by && 0 === F.sumMoves()) {
                    var G = new If;
                    G.instructions = F.instructions.slice(), G.instructions.pop(), F._expand = G
                }
            }), v = [].concat.apply([], v.map(function (F) {
                return F.expand()
            }))), v
        }, d.toRunnable = function (n, o) {
            var p = d.parseTokens(n);
            p = d.optimise(p, o);
            var q = p.join('\n');
            try {
                return Function('heap', 'print', 'getInput', q)
            } catch (r) {
                throw console.log(q), r
            }
        }, d.isValid = function (o) {
            let p = 0;
            for (let q = 0; q < o.length; q++) {
                const r = o[q];
                if ('[' === r ? p++ : ']' === r && p--, 0 > p)return !1
            }
            return 0 == p
        }, b['default'] = d
    }])
});